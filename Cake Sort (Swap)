#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

// Struct to represent a plate
struct Plate {
    vector<int> cakes;

    // Function to check if the plate is full
    bool isFull() const {
        return cakes.size() >= 6;
    }

    // Function to check if this plate and another plate have similar cake configuration
    bool haveSimilarCake(const Plate& other) const {
        return cakes == other.cakes;
    }

    // Function to swap cake configuration with another plate
    void switchPlates(Plate& other) {
        cakes.swap(other.cakes);
    }
};

// Function to print the cake configuration
void printCake(const vector<Plate>& table) {
    for (size_t i = 0; i < table.size(); ++i) {
        if (!table[i].cakes.empty()) { // Only print if the plate is not empty
            cout << "[";
            for (int j = 0; j < table[i].cakes.size(); ++j) {
                cout << table[i].cakes[j] << " ";
            }
            cout << "] ";
        } else {
            cout << "[ ] "; // Print empty plate
        }
        if ((i + 1) % 3 == 0)
            cout << endl;
    }
    cout << endl;
}

// Function to initialize cake with empty plates
void initializeCake(vector<Plate>& table) {
    for (size_t i = 0; i < table.size(); ++i) {
        // Make each plate empty (no numbers inside)
        table[i].cakes.clear();
    }
}

// Function to perform swap of identical numbers near the new plate
void performSwap(vector<Plate>& table, size_t index) {
    Plate& newPlate = table[index]; // Reference to the new plate that was just inserted

    // Check if there are 6 identical numbers in the new plate
    if (newPlate.isFull() && all_of(newPlate.cakes.begin(), newPlate.cakes.end(), [&](int val) { return val == newPlate.cakes[0]; })) {
        cout << "Congratulations! You made a cake with 6 identical numbers at position " << index << "." << endl;
        return;
    }

    vector<int> toMove; // Vector to store elements to move to the new plate

    auto moveFromNeighbor = [&](Plate& neighborPlate) {
        if (!neighborPlate.cakes.empty()) {
            for (auto it = neighborPlate.cakes.begin(); it != neighborPlate.cakes.end();) {
                if (find(newPlate.cakes.begin(), newPlate.cakes.end(), *it) != newPlate.cakes.end()) {
                    toMove.push_back(*it);
                    it = neighborPlate.cakes.erase(it);
                } else {
                    ++it;
                }
            }
        }
    };

    size_t row = index / 3;
    size_t col = index % 3;

    // Check and move from right neighbor
    if (col + 1 < 3) {
        moveFromNeighbor(table[index + 1]);
    }
    // Check and move from left neighbor
    if (col > 0) {
        moveFromNeighbor(table[index - 1]);
    }
    // Check and move from top neighbor
    if (row > 0) {
        moveFromNeighbor(table[index - 3]);
    }
    // Check and move from bottom neighbor
    if (row + 1 < 3) {
        moveFromNeighbor(table[index + 3]);
    }

    // Add all toMove elements to newPlate
    newPlate.cakes.insert(newPlate.cakes.end(), toMove.begin(), toMove.end());

    // If newPlate has more than 6 elements, resize to 6
    if (newPlate.cakes.size() > 6) {
        newPlate.cakes.resize(6);
    }
}

// Function to generate a random plate with numbers between 1 to 6
vector<int> generateRandomPlate() {
    vector<int> plate;
    int numElements = rand() % 5 + 1; // Random number of elements (1-5)

    for (int k = 0; k < numElements; ++k) {
        int newNum = rand() % 6 + 1; // Random color value (1-6)

        // Insert the new number in a way that keeps identical numbers together
        bool inserted = false;
        for (auto it = plate.begin(); it != plate.end(); ++it) {
            if (*it == newNum) {
                plate.insert(it, newNum);
                inserted = true;
                break;
            }
        }
        if (!inserted) {
            plate.push_back(newNum);
        }
    }

    return plate;
}

bool isTableFull(const vector<Plate>& table) {
    for (size_t i = 0; i < table.size(); ++i) {
        if (!table[i].isFull()) {
            return false;
        }
    }
    return true;
}

int main() {
    vector<Plate> table(9);

    initializeCake(table);

    srand(time(0));
    while (true) {
        cout << "Choose plates to insert into the cake (colors represented by numbers 1-6):" << endl;

        size_t index;
        vector<int> newPlate;

        // Generate a new plate
        newPlate = generateRandomPlate();

        // Display the new plate
        cout << "Plate: ";
        for (int k = 0; k < newPlate.size(); ++k) {
            cout << newPlate[k] << " ";
        }
        cout << endl;

        cout << "Enter index (0-8) to insert this plate: ";
        cin >> index;

        if (index < 9) {
            // Check if the selected plate already has 6 elements
            if (!table[index].isFull()) {
                // Add elements from new plate only if it does not exceed 6 elements
                table[index].cakes.insert(table[index].cakes.end(), newPlate.begin(), newPlate.end());

                cout << "New plate inserted at position " << index << endl;

                // Perform swap with neighboring plates
                performSwap(table, index);

                cout << "Updated Cake Configuration:" << endl;
                printCake(table);

                // Check if all plates are full
                if (isTableFull(table)) {
                    cout << "Sorry, you failed. All plates are full." << endl;
                    break;
                }
            } else {
                cout << "The selected plate already has 6 elements. You cannot add more." << endl;
            }
        } else {
            cout << "Invalid position. Please enter a valid index (0-8)." << endl;
        }
    }

    return 0;
}
